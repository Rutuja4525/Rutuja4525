
#include<stdio.h>
#define MAX 5
struct queue
{
  int f,r;
  int items[MAX];
};

void initq1(struct queue *ptr)
{
  ptr->f = -1;
  ptr->r = -1;
}
int isempty(struct queue *ptr)
{
  return (ptr->f == -1 && ptr->f == -1);
}

int enq(struct queue *ptr,int ele)
{
  if(ptr->f == (ptr->r + 1) % MAX)
    printf("\n Queue is Full \n");
  
  else if(ptr->f == -1 && ptr->r ==-1)
    {
        ptr->f = 0;  
        ptr->r = 0;
        ptr->items[ptr->r]=ele;
    }
    else
    {
        ptr->r = (ptr->r+1) % MAX;
        ptr->items[ptr->r]=ele;
    }
  
}

int dq(struct queue *ptr)
{
  int n;
 
  if(ptr->r == ptr->f)
   {
        n=ptr->items[(ptr->f)];
       initq1(ptr);
       return n;
   }
  else
  {
       n=ptr->items[(ptr->f)];
       ptr->f = (ptr->f+1) % MAX;
       return n;
  }
}
void display(struct queue *ptr)
{
  int i;
     isempty(ptr);
    for(i=ptr->f;i<=ptr->r;i++)
    {
      printf("%d\t",ptr->items[i]);
    }
}

int main()
{
  struct queue q1;
  initq1(&q1);
  int cho,ele;
 
  do
  {
    printf("\n1.Enqueue");
    printf("\n2.Dequeue");
    printf("\n3.Display");
    printf("\n4.Exit");
    printf("\nEnter Your Choice : ");
    scanf("%d",&cho);
   
    if(cho==1)
    {
       
      printf("\n Enter Element to Enqueue : ");
      scanf("%d",&ele);
     
      enq(&q1,ele);
    }
    else if(cho==2)
    {
      if(isempty(&q1))
      {
         printf("\n Queue is Empty\n");
      }
      else
        printf("\n %d Removed \n",dq(&q1));
    }
    else if(cho==3)
    {
      if(isempty(&q1))
      {
         printf("\n Queue is Empty\n");  
      }
      else
        display(&q1);
    }
   
   
  }while(cho>=1 && cho<=3);}
