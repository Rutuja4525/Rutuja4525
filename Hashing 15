#include<stdio.h>
#include<stdlib.h>
#define size 11

int hash(int key);
void insertion(int *a,int key,int *c);
void deletion(int *a,int key,int *c);
int search(int arr[],int key,int cnt);

void main()
{
	int key,choice,index,cnt=0;
	int arr[size];
	for(index=0;index<size;index++)
	{
		arr[index]=-1;
	}
	
	while(1)
	{
		printf("\n1]Insert");
		printf("\n2]Delete");
		printf("\n3]Search");
		printf("\n4]Exit");
		printf("\nEnter choice:-");
		scanf("%d",&choice);
		
		switch(choice)
		{
			case 1:printf("\nEnter key value:-");
			       scanf("%d",&key);
			       insertion(&arr[0],key,&cnt);
			       break;
		    case 2:printf("\nEnter key value:-");
			       scanf("%d",&key);
			       deletion(&arr[0],key,&cnt);
			       break;
			case 3:printf("\nEnter key value:-");
			       scanf("%d",&key);
			       index=search(arr,key,cnt);
			       if(index==-1)
			       {
			       	printf("\nHash-table is Empty");
				   }
				   else
				   if(index==-2)
				   {
				   		printf("\n%d not found in hash-table",key);
				   }
				   else
				   {
				   		printf("%d found at %d position",key,index+1);
				   }
			       break;
			case 4:exit(0);
			       break;
			default:printf("\nInvalid choice");
		}
	}
	
	
}

int hash(int key)
{
	int index;
	index=key%size;
	return index;
}

void insertion(int *a,int key,int *c)
{
	int index;
	if(*c==size)
	{
		printf("\nHash-table is Full");
	}
	else
	{
		index=hash(key);
		while(a[index]!=-1)
		{
			index=(index+1)%size;
		}
		a[index]=key;
		*c=(*c)+1;
	}
}

void deletion(int *a,int key,int *c)
{
	int index;
	int cnt=*c;
	index=search(a,key,cnt);
	if(index==-1)
	{
		printf("\nHash-table is Empty");
	}		
	else
	if(index==-2)
	{
		printf("\nKey not present");
	}
	else
	{
		a[index]=-1;
		*c=(*c)-1;
	}
}


int search(int arr[],int key,int cnt)
{
	int index,i;
	if(cnt==0)
	{
		return -1;
	}
	else
	{
		index=hash(key);
		for(i=0;i<size;++i)
		{
			if(arr[index]==key)
			{
				break;
			}
			else
			{
				index=(index+1)%size;
			}
	    }
	    if(i==size)
	    {
	    	return-2;
		}
		else
		{
			return index;
		}
	}
	
}

